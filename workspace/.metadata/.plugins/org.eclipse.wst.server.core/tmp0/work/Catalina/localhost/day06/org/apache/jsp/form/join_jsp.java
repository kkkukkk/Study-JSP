/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat/9.0.56
 * Generated at: 2022-02-16 02:10:00 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp.form;

import javax.servlet.*;
import javax.servlet.http.*;
import javax.servlet.jsp.*;

public final class join_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent,
                 org.apache.jasper.runtime.JspSourceImports {

  private static final javax.servlet.jsp.JspFactory _jspxFactory =
          javax.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  private static final java.util.Set<java.lang.String> _jspx_imports_packages;

  private static final java.util.Set<java.lang.String> _jspx_imports_classes;

  static {
    _jspx_imports_packages = new java.util.HashSet<>();
    _jspx_imports_packages.add("javax.servlet");
    _jspx_imports_packages.add("javax.servlet.http");
    _jspx_imports_packages.add("javax.servlet.jsp");
    _jspx_imports_classes = null;
  }

  private volatile javax.el.ExpressionFactory _el_expressionfactory;
  private volatile org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public java.util.Set<java.lang.String> getPackageImports() {
    return _jspx_imports_packages;
  }

  public java.util.Set<java.lang.String> getClassImports() {
    return _jspx_imports_classes;
  }

  public javax.el.ExpressionFactory _jsp_getExpressionFactory() {
    if (_el_expressionfactory == null) {
      synchronized (this) {
        if (_el_expressionfactory == null) {
          _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
        }
      }
    }
    return _el_expressionfactory;
  }

  public org.apache.tomcat.InstanceManager _jsp_getInstanceManager() {
    if (_jsp_instancemanager == null) {
      synchronized (this) {
        if (_jsp_instancemanager == null) {
          _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
        }
      }
    }
    return _jsp_instancemanager;
  }

  public void _jspInit() {
  }

  public void _jspDestroy() {
  }

  public void _jspService(final javax.servlet.http.HttpServletRequest request, final javax.servlet.http.HttpServletResponse response)
      throws java.io.IOException, javax.servlet.ServletException {

    if (!javax.servlet.DispatcherType.ERROR.equals(request.getDispatcherType())) {
      final java.lang.String _jspx_method = request.getMethod();
      if ("OPTIONS".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        return;
      }
      if (!"GET".equals(_jspx_method) && !"POST".equals(_jspx_method) && !"HEAD".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, "JSP들은 오직 GET, POST 또는 HEAD 메소드만을 허용합니다. Jasper는 OPTIONS 메소드 또한 허용합니다.");
        return;
      }
    }

    final javax.servlet.jsp.PageContext pageContext;
    javax.servlet.http.HttpSession session = null;
    final javax.servlet.ServletContext application;
    final javax.servlet.ServletConfig config;
    javax.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    javax.servlet.jsp.JspWriter _jspx_out = null;
    javax.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html; charset=UTF-8");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write('\r');
      out.write('\n');
request.setCharacterEncoding("UTF-8"); 
      out.write("\r\n");
      out.write("<html lang=\"en\">\r\n");
      out.write("<head>\r\n");
      out.write("    <meta charset=\"UTF-8\">\r\n");
      out.write("    <meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge\">\r\n");
      out.write("    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\r\n");
      out.write("    <title>회원가입</title>\r\n");
      out.write("</head>\r\n");
      out.write("<body>\r\n");
      out.write("    <form action=\"joinDB.jsp\" name=\"joinForm\" method=\"post\">\r\n");
      out.write("        <p>\r\n");
      out.write("            <label>\r\n");
      out.write("                아이디 : <input type=\"text\" name=\"memberId\">\r\n");
      out.write("            </label>\r\n");
      out.write("            <input type=\"button\" value=\"중복확인\" onclick=\"checkId()\">\r\n");
      out.write("        </p>\r\n");
      out.write("        <p id=\"result\"></p>\r\n");
      out.write("        <p>\r\n");
      out.write("            <label>\r\n");
      out.write("                이름 : <input type=\"text\" name=\"memberName\">\r\n");
      out.write("            </label>\r\n");
      out.write("        </p>\r\n");
      out.write("        <p>\r\n");
      out.write("            <label>\r\n");
      out.write("                비밀번호 : <input type=\"password\" name=\"memberPw\">\r\n");
      out.write("            </label>\r\n");
      out.write("        </p>\r\n");
      out.write("        <p id=\"pwCheck\"></p>\r\n");
      out.write("        <p>\r\n");
      out.write("            <label>\r\n");
      out.write("                비밀번호 확인 : <input type=\"password\" name=\"rePw\">\r\n");
      out.write("            </label>\r\n");
      out.write("        </p>\r\n");
      out.write("        <p id=\"pwReCheck\"></p>\r\n");
      out.write("        <p>\r\n");
      out.write("            성별 : \r\n");
      out.write("            <label>남자 <input type=\"radio\" name=\"gender\" value=\"M\"></label>\r\n");
      out.write("            <label>여자 <input type=\"radio\" name=\"gender\" value=\"W\"></label>\r\n");
      out.write("            <label>선택안함 <input type=\"radio\" name=\"gender\" value=\"N\"></label>\r\n");
      out.write("        </p>\r\n");
      out.write("        <p>\r\n");
      out.write("            <input type=\"text\" name=\"address\" id=\"address\" placeholder=\"주소\" readonly>\r\n");
      out.write("            <input type=\"button\" onclick=\"sample5_execDaumPostcode()\" value=\"주소 검색\"><br>\r\n");
      out.write("            <input type=\"text\" name=\"addressDetail\" placeholder=\"상세 주소\">\r\n");
      out.write("        </p>\r\n");
      out.write("        <p>\r\n");
      out.write("            <input type=\"button\" value=\"가입 완료\" onclick=\"join()\">\r\n");
      out.write("        </p>\r\n");
      out.write("    </form>\r\n");
      out.write("</body>\r\n");
      out.write("<div id=\"map\" style=\"width:300px;height:300px;margin-top:10px;display:none\"></div>\r\n");
      out.write("<script src=\"//t1.daumcdn.net/mapjsapi/bundle/postcode/prod/postcode.v2.js\"></script>\r\n");
      out.write("<script src=\"//dapi.kakao.com/v2/maps/sdk.js?appkey=dddcfaf76dc282d71df78320125838b8&libraries=services\"></script>\r\n");
      out.write("<script src=\"join.js\"></script>\r\n");
      out.write("<script>\r\n");
      out.write("    var mapContainer = document.getElementById('map'), // 지도를 표시할 div\r\n");
      out.write("        mapOption = {\r\n");
      out.write("            center: new daum.maps.LatLng(37.537187, 127.005476), // 지도의 중심좌표\r\n");
      out.write("            level: 5 // 지도의 확대 레벨\r\n");
      out.write("        };\r\n");
      out.write("\r\n");
      out.write("    //지도를 미리 생성\r\n");
      out.write("    var map = new daum.maps.Map(mapContainer, mapOption);\r\n");
      out.write("    //주소-좌표 변환 객체를 생성\r\n");
      out.write("    var geocoder = new daum.maps.services.Geocoder();\r\n");
      out.write("    //마커를 미리 생성\r\n");
      out.write("    var marker = new daum.maps.Marker({\r\n");
      out.write("        position: new daum.maps.LatLng(37.537187, 127.005476),\r\n");
      out.write("        map: map\r\n");
      out.write("    });\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("    function sample5_execDaumPostcode() {\r\n");
      out.write("        new daum.Postcode({\r\n");
      out.write("            oncomplete: function(data) {\r\n");
      out.write("                var addr = data.address; // 최종 주소 변수\r\n");
      out.write("\r\n");
      out.write("                // 주소 정보를 해당 필드에 넣는다.\r\n");
      out.write("                document.getElementById(\"address\").value = addr;\r\n");
      out.write("                // 주소로 상세 정보를 검색\r\n");
      out.write("                geocoder.addressSearch(data.address, function(results, status) {\r\n");
      out.write("                    // 정상적으로 검색이 완료됐으면\r\n");
      out.write("                    if (status === daum.maps.services.Status.OK) {\r\n");
      out.write("\r\n");
      out.write("                        var result = results[0]; //첫번째 결과의 값을 활용\r\n");
      out.write("\r\n");
      out.write("                        // 해당 주소에 대한 좌표를 받아서\r\n");
      out.write("                        var coords = new daum.maps.LatLng(result.y, result.x);\r\n");
      out.write("                        // 지도를 보여준다.\r\n");
      out.write("                        mapContainer.style.display = \"block\";\r\n");
      out.write("                        map.relayout();\r\n");
      out.write("                        // 지도 중심을 변경한다.\r\n");
      out.write("                        map.setCenter(coords);\r\n");
      out.write("                        // 마커를 결과값으로 받은 위치로 옮긴다.\r\n");
      out.write("                        marker.setPosition(coords)\r\n");
      out.write("                    }\r\n");
      out.write("                });\r\n");
      out.write("            }\r\n");
      out.write("        }).open();\r\n");
      out.write("    }\r\n");
      out.write("</script>\r\n");
      out.write("</html>");
    } catch (java.lang.Throwable t) {
      if (!(t instanceof javax.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
