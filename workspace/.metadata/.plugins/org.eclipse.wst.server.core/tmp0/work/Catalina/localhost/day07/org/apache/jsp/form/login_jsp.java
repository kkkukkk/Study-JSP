/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat/9.0.56
 * Generated at: 2022-02-17 02:22:28 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp.form;

import javax.servlet.*;
import javax.servlet.http.*;
import javax.servlet.jsp.*;
import java.util.Base64;

public final class login_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent,
                 org.apache.jasper.runtime.JspSourceImports {

  private static final javax.servlet.jsp.JspFactory _jspxFactory =
          javax.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  private static final java.util.Set<java.lang.String> _jspx_imports_packages;

  private static final java.util.Set<java.lang.String> _jspx_imports_classes;

  static {
    _jspx_imports_packages = new java.util.HashSet<>();
    _jspx_imports_packages.add("javax.servlet");
    _jspx_imports_packages.add("javax.servlet.http");
    _jspx_imports_packages.add("javax.servlet.jsp");
    _jspx_imports_classes = new java.util.HashSet<>();
    _jspx_imports_classes.add("java.util.Base64");
  }

  private volatile javax.el.ExpressionFactory _el_expressionfactory;
  private volatile org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public java.util.Set<java.lang.String> getPackageImports() {
    return _jspx_imports_packages;
  }

  public java.util.Set<java.lang.String> getClassImports() {
    return _jspx_imports_classes;
  }

  public javax.el.ExpressionFactory _jsp_getExpressionFactory() {
    if (_el_expressionfactory == null) {
      synchronized (this) {
        if (_el_expressionfactory == null) {
          _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
        }
      }
    }
    return _el_expressionfactory;
  }

  public org.apache.tomcat.InstanceManager _jsp_getInstanceManager() {
    if (_jsp_instancemanager == null) {
      synchronized (this) {
        if (_jsp_instancemanager == null) {
          _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
        }
      }
    }
    return _jsp_instancemanager;
  }

  public void _jspInit() {
  }

  public void _jspDestroy() {
  }

  public void _jspService(final javax.servlet.http.HttpServletRequest request, final javax.servlet.http.HttpServletResponse response)
      throws java.io.IOException, javax.servlet.ServletException {

    if (!javax.servlet.DispatcherType.ERROR.equals(request.getDispatcherType())) {
      final java.lang.String _jspx_method = request.getMethod();
      if ("OPTIONS".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        return;
      }
      if (!"GET".equals(_jspx_method) && !"POST".equals(_jspx_method) && !"HEAD".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, "JSP들은 오직 GET, POST 또는 HEAD 메소드만을 허용합니다. Jasper는 OPTIONS 메소드 또한 허용합니다.");
        return;
      }
    }

    final javax.servlet.jsp.PageContext pageContext;
    javax.servlet.http.HttpSession session = null;
    final javax.servlet.ServletContext application;
    final javax.servlet.ServletConfig config;
    javax.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    javax.servlet.jsp.JspWriter _jspx_out = null;
    javax.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html; charset=UTF-8");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write("\r\n");
      out.write("\r\n");
request.setCharacterEncoding("UTF-8"); 
      out.write("\r\n");
      out.write("<!DOCTYPE html>\r\n");
      out.write("<html lang=\"en\">\r\n");
      out.write("<head>\r\n");
      out.write("    <meta charset=\"UTF-8\">\r\n");
      out.write("    <meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge\">\r\n");
      out.write("    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\r\n");
      out.write("    <title>로그인</title>\r\n");
      out.write("</head>\r\n");
      out.write("<body>\r\n");
      out.write("	");

		String cookieCheck = request.getHeader("Cookie");
		String memberId = "", memberPw = "", saveId = "", autoLogin = "";
		if(cookieCheck != null){
			Cookie[] cookies = request.getCookies();
			for(Cookie cookie : cookies){
				//쿠키에 이전 로그인 아이디가 있는 지 검사
				if(cookie.getName().equals("memberId")){
					//이전 로그인 아이디를 memberId에 저장
					memberId = cookie.getValue();
				}
				//쿠키에 이전 로그인 비밀번호가 있는 지 검사
				if(cookie.getName().equals("memberPw")){
					//이전 로그인 비밀번호를 복호화 한 뒤 memberPw에 저장
					memberPw = new String(Base64.getDecoder().decode(cookie.getValue()));
				}
				//쿠키에 아이디 저장이 체크되어 있는 지 검사
				if(cookie.getName().equals("saveId")){
					//아이디 저장 상태를 saveId에 저장
					saveId = cookie.getValue();
				}
				//쿠키에 자동 로그인이 체크되어 있는 지 검사
				if(cookie.getName().equals("autoLogin")){
					//자동 로그인 상태를 autoLogin에 저장
					autoLogin = cookie.getValue();
				}
			}
		}
	
      out.write("\r\n");
      out.write("	<!-- JS에서 사용하고자 하는 변수들 -->\r\n");
      out.write("	<input type=\"hidden\" name=\"checkPw\" value=\"");
      out.print(memberPw);
      out.write("\">\r\n");
      out.write("	<input type=\"hidden\" name=\"checkSaveId\" value=\"");
      out.print(saveId );
      out.write("\">\r\n");
      out.write("	<input type=\"hidden\" name=\"checkAutoLogin\" value=\"");
      out.print(autoLogin );
      out.write("\">\r\n");
      out.write("	\r\n");
      out.write("    <form action=\"loginOk.jsp\" method=\"post\" name=\"loginForm\">\r\n");
      out.write("        <table border=\"1\" style=\"text-align: center; margin:0 auto;\">\r\n");
      out.write("            <tr>\r\n");
      out.write("                <th>아이디</th>\r\n");
      out.write("                <!-- 쿠키가 있으면 아이디를 value에 넣기 -->\r\n");
      out.write("                <td><input type=\"text\" name=\"memberId\" value=\"");
      out.print(memberId);
      out.write("\"></td>\r\n");
      out.write("            </tr>\r\n");
      out.write("            <tr>\r\n");
      out.write("                <th>비밀번호</th>\r\n");
      out.write("                <td><input type=\"password\" name=\"memberPw\" value=\"");
      out.print(memberPw);
      out.write("\"></td>\r\n");
      out.write("            </tr>\r\n");
      out.write("            <tr>\r\n");
      out.write("                <td colspan=\"2\" style=\"text-align:center;\">\r\n");
      out.write("                    <label><input type=\"checkbox\" name=\"saveId\" value=\"true\"> 아이디 저장</label>\r\n");
      out.write("                    <label><input type=\"checkbox\" name=\"autoLogin\" value=\"true\"> 자동 로그인</label>\r\n");
      out.write("                </td>\r\n");
      out.write("            </tr>\r\n");
      out.write("            <tr>\r\n");
      out.write("                <td colspan=\"2\">\r\n");
      out.write("                    <input type=\"button\" value=\"로그인\" onclick=\"send()\">\r\n");
      out.write("                </td>\r\n");
      out.write("            </tr>\r\n");
      out.write("        </table>\r\n");
      out.write("    </form>\r\n");
      out.write("</body>\r\n");
      out.write("<script src=\"https://cdnjs.cloudflare.com/ajax/libs/crypto-js/3.1.2/rollups/aes.js\"></script>\r\n");
      out.write("<script>\r\n");
      out.write("\r\n");
      out.write("	// 쿠키에 아이디 저장이 체크되어 있으면\r\n");
      out.write("	if(document.querySelector(\"input[name='checkSaveId']\").value){\r\n");
      out.write("		// 현재 페이지의 아이디 저장 체크박스를 체크상태로 변경\r\n");
      out.write("		loginForm.saveId.checked = true;\r\n");
      out.write("	}\r\n");
      out.write("	// 쿠키에 자동 로그인이 체크되어 있으면\r\n");
      out.write("	if(document.querySelector(\"input[name='checkAutoLogin']\").value){\r\n");
      out.write("		// 현재 페이지의 자동 로그인 체크박스를 체크상태로 변경\r\n");
      out.write("		loginForm.autoLogin.checked = true;\r\n");
      out.write("	}\r\n");
      out.write("	// 이전 로그인 비밀번호가 쿠키에 저장되어 있다면 자동 로그인을 체크한 사용자이다.\r\n");
      out.write("	if(document.querySelector(\"input[name='checkPw']\").value){\r\n");
      out.write("		//아이디와 비밀번호 모두 쿠키를 사용해서 입력해놨기 때문에 바로 send()를 사용하여 전송한다.\r\n");
      out.write("		send();\r\n");
      out.write("	}\r\n");
      out.write("	\r\n");
      out.write("    function send(){\r\n");
      out.write("        var form = loginForm;\r\n");
      out.write("        if(!form.memberId.value){\r\n");
      out.write("            alert(\"아이디를 입력해주세요.\");\r\n");
      out.write("            form.memberId.focus();\r\n");
      out.write("            return;\r\n");
      out.write("        }\r\n");
      out.write("        if(!form.memberPw.value){\r\n");
      out.write("            alert(\"패스워드를 입력해주세요.\");\r\n");
      out.write("            form.memberPw.focus();\r\n");
      out.write("            return;\r\n");
      out.write("        }\r\n");
      out.write("\r\n");
      out.write("        form.memberPw.value = btoa(form.memberPw.value);\r\n");
      out.write("\r\n");
      out.write("        form.submit();\r\n");
      out.write("    }\r\n");
      out.write("</script>\r\n");
      out.write("</html>");
    } catch (java.lang.Throwable t) {
      if (!(t instanceof javax.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
